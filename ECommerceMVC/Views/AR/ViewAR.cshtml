@model ECommerceMVC.Data.HangHoa

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>AR Viewer</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: black;
        }
        canvas {
            display: block;
        }
        button {
            position: absolute;
            z-index: 10;
            top: 20px;
            left: 20px;
        }
    </style>
</head>
<body>
    <script type="importmap">
        {
            "imports": {
                "three": "https://s3.cloudfly.vn/jsm/jsm/three.module.js",
                "three/addons/": "https://s3.cloudfly.vn/jsm/jsm/"
            }
        }
    </script>
    <script type="module">
        import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.161.0/build/three.module.js';
        import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.161.0/examples/jsm/loaders/GLTFLoader.js';
        import { ARButton } from 'https://cdn.jsdelivr.net/npm/three@0.161.0/examples/jsm/webxr/ARButton.js';

        const scene = new THREE.Scene();

        const camera = new THREE.PerspectiveCamera();
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.xr.enabled = true;
        document.body.appendChild(renderer.domElement);

        document.body.appendChild(ARButton.createButton(renderer, {
            requiredFeatures: ['hit-test']
        }));

        const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
        scene.add(light);

        const modelUrl = '@Model.ModelUrl'; // Razor passes modelUrl here
        const loader = new GLTFLoader();

        let model = null;
        loader.load(modelUrl, gltf => {
            model = gltf.scene;
            model.scale.set(0.5, 0.5, 0.5); // adjust as needed
        });

        let controller, reticle;

        const setupAR = () => {
            const session = renderer.xr.getSession();
            const referenceSpace = renderer.xr.getReferenceSpace();
            const viewerSpace = renderer.xr.getViewerSpace();

            session.requestReferenceSpace('viewer').then(() => {
                session.requestHitTestSource({ space: viewerSpace }).then(hitTestSource => {
                    renderer.setAnimationLoop((timestamp, frame) => {
                        if (frame) {
                            const hitTestResults = frame.getHitTestResults(hitTestSource);
                            if (hitTestResults.length > 0 && reticle) {
                                const hit = hitTestResults[0];
                                const pose = hit.getPose(referenceSpace);
                                reticle.visible = true;
                                reticle.matrix.fromArray(pose.transform.matrix);
                            }
                        }

                        renderer.render(scene, camera);
                    });
                });
            });
        };

        reticle = new THREE.Mesh(
            new THREE.RingGeometry(0.1, 0.15, 32).rotateX(-Math.PI / 2),
            new THREE.MeshBasicMaterial({ color: 0x0fff00 })
        );
        reticle.matrixAutoUpdate = false;
        reticle.visible = false;
        scene.add(reticle);

        controller = renderer.xr.getController(0);
        controller.addEventListener('select', () => {
            if (reticle.visible && model) {
                const placedModel = model.clone();
                placedModel.position.setFromMatrixPosition(reticle.matrix);
                placedModel.quaternion.setFromRotationMatrix(reticle.matrix);
                scene.add(placedModel);
            }
        });
        scene.add(controller);

        renderer.xr.addEventListener('sessionstart', setupAR);
    </script>
</body>
</html>
